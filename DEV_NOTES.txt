# Development Log: UMLS META Backup

Backing up the entire `META` folder (medical-coding-app/umls_data/META) is a safe and recommended way to preserve the UMLS source data for future use.

- The `META` folder contains all the original UMLS .RRF and .CTL files needed to rebuild the QuickUMLS index or extract advanced mappings (e.g., CUI → ICD-10, SNOMED, etc.).
- You can copy this folder to an external drive, cloud storage, or another secure location.
- To save space, you can compress the folder (e.g., zip or tar.gz).
- If you ever need to rebuild the QuickUMLS index or perform additional mappings, simply restore the `META` folder to its original location.

This approach allows you to delete the large `META` folder from your working directory to save space, while ensuring you can always restore it if needed. 

# 2024-07-11: Switched QuickUMLS cache to bind mount

- Updated docker-compose.yml to use a bind mount for the QuickUMLS cache directory:
  - `./medical-coding-app/umls_data/quickumls_cache:/app/umls_data/quickumls_cache`
- The cache is now stored directly on the host and visible in the project folder.
- This makes it easy to back up, inspect, or move the cache, and ensures it persists even if Docker volumes are deleted. 

# 2024-07-12: Keyboard shortcut + SNOMED / ICD-10 support

## Features Added
- **Enter / Ctrl+Enter Shortcut**: Users can now press Ctrl + Enter (Cmd + Enter on macOS) inside the clinical-note textarea to trigger the *Extract Codes* action. Implemented via a small JS snippet in `app/templates/index.html`.
- **SNOMED & ICD-10 Columns**: The results table now shows codes from SNOMED CT (US edition) and ICD-10-CM alongside each extracted UMLS CUI.
- **SQLite-based UMLS Lookup**:
  - New helper `app/utils/umls_lookup.py` builds an SQLite DB (`umls_lookup.db`) on first run, importing only the rows we need from `MRCONSO.RRF` (≈200-300 MB).
  - Fast, indexed look-ups per request with negligible RAM use.
  - DB lives inside `umls_data/` bind-mount → built **once** per host, shared by all users.
- **Backend Integration**: `app/main/routes.py` enriches each extracted concept with `snomed_codes` and `icd10_codes` before rendering.
- **Template Updates**: New columns added to the `<table>` plus updated colspan for the *no codes* row.

## Migration / Deployment Notes
1. No compose changes needed – the SQLite file is written to the same volume mount as the UMLS data.
2. First startup after this change will take several minutes while the lookup DB is built; subsequent restarts are instant.

---

## Project Structure (quick reference)
```
medical-coding-app/
  app/
    __init__.py      – Flask factory & `get_nlp()`
    main/            – UI routes, WTForms, HTML template
    models/          – SQLAlchemy models (ExtractedCode, …)
    nlp/             – `pipeline.py` (medSpaCy + QuickUMLS singleton)
    utils/
      audit.py       – audit-trail helper
      export.py      – CSV/JSON export
      umls_lookup.py – NEW: CUI → SNOMED / ICD-10 mapper
    static/          – CSS
    templates/       – HTML (currently just `index.html`)
  umls_data/
    META/            – Original UMLS release files (.RRF / .CTL)
    quickumls_cache/ – SimString DB (rebuilt automatically)
    umls_lookup.db   – NEW SQLite CUI-code lookup (auto-generated)
  Dockerfile         – Production image
  docker-compose.yml – Local dev & deployment stack
  tests/             – PyTest suite
```

## First Development Steps for New Contributors
1. **Clone & start containers**
   ```bash
   git clone <repo>
   cd Medicode/medical-coding-app
   docker compose up --build
   ```
2. **Wait for first-run setup**
   • QuickUMLS cache and `umls_lookup.db` will be built automatically (watch the logs).  
   • Subsequent launches skip these expensive steps.
3. **Run tests**
   ```bash
   docker compose exec web pytest
   ```
4. **Hot-reload code**
   • Flask’s reloader is enabled in development mode (`DEBUG=true`).  
   • Edit Python or HTML files → container restarts automatically.
5. **Enter container shell (optional)**
   ```bash
   docker compose exec web bash
   ```
6. **Database inspection**  
   • App data: `sqlite:///site.db` (persistent).  
   • Lookup data: `umls_data/umls_lookup.db` (read-only after build).

--- 

# Chronological Development Log

## Initial Setup
- Project created as a Flask web app for medical coding using UMLS data.
- Dockerized from the start; all development and deployment runs inside Docker containers.
- UMLS data placed in `umls_data/META/` (never committed to git).

## Core Features
- Implemented clinical text input form and extraction workflow.
- Integrated medSpaCy and QuickUMLS for concept extraction.
- Results table displays extracted UMLS CUIs, terms, similarity, and semantic types.
- Added audit trail and export utilities.

## Docker & Data Handling
- QuickUMLS cache and lookup DB are built automatically on first run if not present.
- `.gitignore` updated to exclude all UMLS data and derived files.
- README updated with clear UMLS data setup instructions for new users.

## UI/UX Enhancements
- Added similarity cutoff slider (default 1.0) to filter results.
- Added checkbox to show only codes with ICD-10 mappings.
- Added spinner/processing indicator next to Extract Codes button.
- Made app container and SNOMED column wider; small print for CUI and code details.
- Enter key in textarea triggers extraction (no need to click button).

## Code Mapping & Display
- Built SQLite-based lookup for SNOMED and ICD-10 codes/descriptions from UMLS.
- Results table shows code:description for SNOMED and ICD-10.
- Semantic type column now uses TUI codes and displays full descriptions (from a Python mapping).

## Testing & Best Practices
- Test suite included (pytest, pytest-mock); requirements updated.
- All UMLS and derived data must be provided by the user (never shared in repo or image).
- Dev log and README updated regularly to document all major changes and setup steps.

--- 